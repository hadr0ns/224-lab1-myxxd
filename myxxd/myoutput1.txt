00000000: 2369 6e63 6c75 6465 203c 7374 6469 6f2e  #include <stdio.
00000010: 683e 0a23 696e 636c 7564 6520 3c73 7464  h>.#include <std
00000020: 6c69 622e 683e 0a23 696e 636c 7564 6520  lib.h>.#include 
00000030: 3c73 7472 696e 672e 683e 0a0a 2364 6566  <string.h>..#def
00000040: 696e 6520 5452 5545 2031 0a23 6465 6669  ine TRUE 1.#defi
00000050: 6e65 2046 414c 5345 2030 0a23 6465 6669  ne FALSE 0.#defi
00000060: 6e65 2042 4144 5f4e 554d 4245 525f 4152  ne BAD_NUMBER_AR
00000070: 4753 2031 0a0a 2f2a 2a0a 202a 2050 6172  GS 1../**. * Par
00000080: 7365 7320 7468 6520 636f 6d6d 616e 6420  ses the command 
00000090: 6c69 6e65 2e0a 202a 0a20 2a20 6172 6763  line.. *. * argc
000000a0: 3a20 7468 6520 6e75 6d62 6572 206f 6620  : the number of 
000000b0: 6974 656d 7320 6f6e 2074 6865 2063 6f6d  items on the com
000000c0: 6d61 6e64 206c 696e 6520 2861 6e64 206c  mand line (and l
000000d0: 656e 6774 6820 6f66 2074 6865 0a20 2a20  ength of the. * 
000000e0: 2020 2020 2020 6172 6776 2061 7272 6179        argv array
000000f0: 2920 696e 636c 7564 696e 6720 7468 6520  ) including the 
00000100: 6578 6563 7574 6162 6c65 0a20 2a20 6172  executable. * ar
00000110: 6776 3a20 7468 6520 6172 7261 7920 6f66  gv: the array of
00000120: 2061 7267 756d 656e 7473 2061 7320 7374   arguments as st
00000130: 7269 6e67 7320 2863 6861 722a 2061 7272  rings (char* arr
00000140: 6179 290a 202a 2062 6974 733a 2074 6865  ay). * bits: the
00000150: 2069 6e74 6567 6572 2076 616c 7565 2069   integer value i
00000160: 7320 7365 7420 746f 2054 5255 4520 6966  s set to TRUE if
00000170: 2062 6974 7320 6f75 7470 7574 2069 6e64   bits output ind
00000180: 6963 6174 6564 0a20 2a20 2020 2020 2020  icated. *       
00000190: 6f75 7468 6572 7769 7365 2046 414c 5345  outherwise FALSE
000001a0: 2066 6f72 2068 6578 206f 7574 7075 740a   for hex output.
000001b0: 202a 0a20 2a20 7265 7475 726e 7320 7468   *. * returns th
000001c0: 6520 696e 7075 7420 6669 6c65 2070 6f69  e input file poi
000001d0: 6e74 6572 2028 4649 4c45 2a29 0a20 2a2a  nter (FILE*). **
000001e0: 2f0a 4649 4c45 202a 7061 7273 6543 6f6d  /.FILE *parseCom
000001f0: 6d61 6e64 4c69 6e65 2869 6e74 2061 7267  mandLine(int arg
00000200: 632c 2063 6861 7220 2a2a 6172 6776 2c20  c, char **argv, 
00000210: 696e 7420 2a62 6974 7329 207b 0a20 2069  int *bits) {.  i
00000220: 6620 2861 7267 6320 3e20 3229 207b 0a20  f (argc > 2) {. 
00000230: 2020 2070 7269 6e74 6628 2255 7361 6765     printf("Usage
00000240: 3a20 2573 205b 2d62 7c2d 6269 7473 5d5c  : %s [-b|-bits]\
00000250: 6e22 2c20 6172 6776 5b30 5d29 3b0a 2020  n", argv[0]);.  
00000260: 2020 6578 6974 2842 4144 5f4e 554d 4245    exit(BAD_NUMBE
00000270: 525f 4152 4753 293b 0a20 207d 0a0a 2020  R_ARGS);.  }..  
00000280: 6966 2028 6172 6763 203d 3d20 3220 2626  if (argc == 2 &&
00000290: 0a20 2020 2020 2028 7374 7263 6d70 2861  .      (strcmp(a
000002a0: 7267 765b 315d 2c20 222d 6222 2920 3d3d  rgv[1], "-b") ==
000002b0: 2030 207c 7c20 7374 7263 6d70 2861 7267   0 || strcmp(arg
000002c0: 765b 315d 2c20 222d 6269 7473 2229 203d  v[1], "-bits") =
000002d0: 3d20 3029 2920 7b0a 2020 2020 2a62 6974  = 0)) {.    *bit
000002e0: 7320 3d20 5452 5545 3b0a 2020 7d20 656c  s = TRUE;.  } el
000002f0: 7365 207b 0a20 2020 202a 6269 7473 203d  se {.    *bits =
00000300: 2046 414c 5345 3b0a 2020 7d0a 0a20 2072   FALSE;.  }..  r
00000310: 6574 7572 6e20 7374 6469 6e3b 0a7d 0a0a  eturn stdin;.}..
00000320: 766f 6964 2062 7974 6554 6f48 6578 2875  void byteToHex(u
00000330: 6e73 6967 6e65 6420 6368 6172 2064 6174  nsigned char dat
00000340: 6129 207b 0a09 696e 7420 6469 6769 7431  a) {..int digit1
00000350: 203d 2064 6174 612f 3136 3b0a 0969 6620   = data/16;..if 
00000360: 2864 6967 6974 3120 3c20 3029 207b 0a09  (digit1 < 0) {..
00000370: 0970 7269 6e74 6628 2264 6174 6120 2563  .printf("data %c
00000380: 2c20 2564 2c20 7072 6f64 7563 6564 206f  , %d, produced o
00000390: 7574 7075 7420 6c65 7373 2074 6861 6e20  utput less than 
000003a0: 7a65 726f 2c20 6469 6769 7420 3120 7761  zero, digit 1 wa
000003b0: 7320 2564 222c 2064 6174 612c 2064 6174  s %d", data, dat
000003c0: 612c 2064 6967 6974 3129 3b0a 0909 6578  a, digit1);...ex
000003d0: 6974 2028 3029 3b0a 097d 0a09 6368 6172  it (0);..}..char
000003e0: 2063 6861 7264 6967 6974 313b 0a09 6966   chardigit1;..if
000003f0: 2028 6469 6769 7431 203e 2039 2920 7b0a   (digit1 > 9) {.
00000400: 0909 6368 6172 6469 6769 7431 203d 2064  ..chardigit1 = d
00000410: 6967 6974 3120 2b20 3837 3b0a 0909 7072  igit1 + 87;...pr
00000420: 696e 7466 2822 2563 222c 2063 6861 7264  intf("%c", chard
00000430: 6967 6974 3129 3b0a 097d 2065 6c73 6520  igit1);..} else 
00000440: 7b0a 0909 7072 696e 7466 2822 2564 222c  {...printf("%d",
00000450: 2064 6967 6974 3129 3b0a 097d 0a09 696e   digit1);..}..in
00000460: 7420 7265 6d61 696e 6465 7220 3d20 6461  t remainder = da
00000470: 7461 2531 363b 0a09 696e 7420 6469 6769  ta%16;..int digi
00000480: 7432 203d 2030 3b0a 0963 6861 7220 6469  t2 = 0;..char di
00000490: 6769 7432 6368 6172 3b0a 0969 6620 2872  git2char;..if (r
000004a0: 656d 6169 6e64 6572 203e 2039 2920 7b0a  emainder > 9) {.
000004b0: 0909 6469 6769 7432 6368 6172 203d 2072  ..digit2char = r
000004c0: 656d 6169 6e64 6572 202b 2038 373b 0a09  emainder + 87;..
000004d0: 0970 7269 6e74 6628 2225 6322 2c20 6469  .printf("%c", di
000004e0: 6769 7432 6368 6172 293b 0a09 7d20 656c  git2char);..} el
000004f0: 7365 207b 0a09 0964 6967 6974 3220 3d20  se {...digit2 = 
00000500: 7265 6d61 696e 6465 723b 0a09 0970 7269  remainder;...pri
00000510: 6e74 6628 2225 6422 2c20 6469 6769 7432  ntf("%d", digit2
00000520: 293b 0a09 7d0a 0a0a 7d0a 2f2a 2a0a 202a  );..}...}./**. *
00000530: 2057 7269 7465 7320 6461 7461 2074 6f20   Writes data to 
00000540: 7374 646f 7574 2069 6e20 6865 7861 6465  stdout in hexade
00000550: 6369 6d61 6c2e 0a20 2a0a 202a 2053 6565  cimal.. *. * See
00000560: 206d 7978 7864 2e6d 6420 666f 7220 6465   myxxd.md for de
00000570: 7461 696c 732e 0a20 2a0a 202a 2064 6174  tails.. *. * dat
00000580: 613a 2061 6e20 6172 7261 7920 6f66 206e  a: an array of n
00000590: 6f20 6d6f 7265 2074 6861 6e20 3136 2063  o more than 16 c
000005a0: 6861 7261 6374 6572 730a 202a 2073 697a  haracters. * siz
000005b0: 653a 2074 6865 2073 697a 6520 6f66 2074  e: the size of t
000005c0: 6865 2061 7272 6179 0a20 2a2a 2f0a 766f  he array. **/.vo
000005d0: 6964 2070 7269 6e74 4461 7461 4173 4865  id printDataAsHe
000005e0: 7828 756e 7369 676e 6564 2063 6861 7220  x(unsigned char 
000005f0: 2a64 6174 612c 2073 697a 655f 7420 7369  *data, size_t si
00000600: 7a65 2920 7b0a 092f 2f70 7269 6e74 6628  ze) {..//printf(
00000610: 2254 4f44 4f20 313a 2070 7269 6e74 4461  "TODO 1: printDa
00000620: 7461 4173 4865 7820 2832 2922 293b 0a09  taAsHex (2)");..
00000630: 2f2f 7072 696e 7466 2822 7369 7a65 2069  //printf("size i
00000640: 7320 256c 6422 2c20 7369 7a65 293b 0a09  s %ld", size);..
00000650: 696e 7420 636f 756e 7465 7220 3d20 303b  int counter = 0;
00000660: 0a09 696e 7420 626c 6f63 6b73 203d 2030  ..int blocks = 0
00000670: 3b0a 0966 6f72 2028 636f 756e 7465 723b  ;..for (counter;
00000680: 2063 6f75 6e74 6572 203c 2073 697a 653b   counter < size;
00000690: 2063 6f75 6e74 6572 2b2b 2920 7b0a 0909   counter++) {...
000006a0: 6966 2028 636f 756e 7465 7225 3220 3d3d  if (counter%2 ==
000006b0: 2030 2920 7b0a 0909 0970 7269 6e74 6628   0) {....printf(
000006c0: 2220 2229 3b0a 0909 0962 6c6f 636b 732b  " ");....blocks+
000006d0: 2b3b 0a09 097d 0a09 0962 7974 6554 6f48  +;...}...byteToH
000006e0: 6578 2864 6174 615b 636f 756e 7465 725d  ex(data[counter]
000006f0: 293b 0a09 7d0a 0969 6620 2873 697a 6520  );..}..if (size 
00000700: 3c20 3136 2920 7b0a 0909 696e 7420 7265  < 16) {...int re
00000710: 6d61 696e 6465 7220 3d20 3136 2d73 697a  mainder = 16-siz
00000720: 653b 0a09 0966 6f72 2028 696e 7420 6920  e;...for (int i 
00000730: 3d20 303b 2069 203c 2072 656d 6169 6e64  = 0; i < remaind
00000740: 6572 3b20 692b 2b29 7b0a 0909 0970 7269  er; i++){....pri
00000750: 6e74 6628 2220 2022 293b 0a09 097d 0a09  ntf("  ");...}..
00000760: 0966 6f72 2028 626c 6f63 6b73 3b20 626c  .for (blocks; bl
00000770: 6f63 6b73 203c 2038 3b20 626c 6f63 6b73  ocks < 8; blocks
00000780: 2b2b 297b 0a09 0909 7072 696e 7466 2822  ++){....printf("
00000790: 2022 293b 0a09 097d 0a09 7d0a 0972 6574   ");...}..}..ret
000007a0: 7572 6e3b 0a7d 0a0a 2f2a 2a0a 202a 2057  urn;.}../**. * W
000007b0: 7269 7465 7320 6461 7461 2074 6f20 7374  rites data to st
000007c0: 646f 7574 2061 7320 6368 6172 6163 7465  dout as characte
000007d0: 7273 2e0a 202a 0a20 2a20 5365 6520 6d79  rs.. *. * See my
000007e0: 7878 642e 6d64 2066 6f72 2064 6574 6169  xxd.md for detai
000007f0: 6c73 2e0a 202a 0a20 2a20 6461 7461 3a20  ls.. *. * data: 
00000800: 616e 2061 7272 6179 206f 6620 6e6f 206d  an array of no m
00000810: 6f72 6520 7468 616e 2031 3620 6368 6172  ore than 16 char
00000820: 6163 7465 7273 0a20 2a20 7369 7a65 3a20  acters. * size: 
00000830: 7468 6520 7369 7a65 206f 6620 7468 6520  the size of the 
00000840: 6172 7261 790a 202a 2a2f 0a76 6f69 6420  array. **/.void 
00000850: 7072 696e 7444 6174 6141 7343 6861 7273  printDataAsChars
00000860: 2875 6e73 6967 6e65 6420 6368 6172 202a  (unsigned char *
00000870: 6461 7461 2c20 7369 7a65 5f74 2073 697a  data, size_t siz
00000880: 6529 207b 0a09 2f2f 7072 696e 7466 2822  e) {..//printf("
00000890: 544f 444f 2032 3a20 7072 696e 7444 6174  TODO 2: printDat
000008a0: 6141 7343 6861 7273 2028 3329 2229 3b0a  aAsChars (3)");.
000008b0: 0966 6f72 2028 696e 7420 6920 3d20 303b  .for (int i = 0;
000008c0: 2069 203c 2073 697a 653b 2069 202b 2b29   i < size; i ++)
000008d0: 207b 0a09 0969 6620 2864 6174 615b 695d   {...if (data[i]
000008e0: 203c 2033 3220 7c7c 2064 6174 615b 695d   < 32 || data[i]
000008f0: 203e 2031 3236 2920 7b0a 0909 0970 7269   > 126) {....pri
00000900: 6e74 6628 222e 2229 3b0a 0909 7d20 656c  ntf(".");...} el
00000910: 7365 207b 0a09 0909 7072 696e 7466 2822  se {....printf("
00000920: 2563 222c 2064 6174 615b 695d 293b 0a09  %c", data[i]);..
00000930: 097d 0a0a 097d 0a0a 0972 6574 7572 6e3b  .}...}...return;
00000940: 0a7d 0a0a 766f 6964 2072 6561 6441 6e64  .}..void readAnd
00000950: 5072 696e 7449 6e70 7574 4173 4865 7828  PrintInputAsHex(
00000960: 4649 4c45 202a 696e 7075 7429 207b 0a09  FILE *input) {..
00000970: 756e 7369 676e 6564 2063 6861 7220 6461  unsigned char da
00000980: 7461 5b31 365d 3b0a 0969 6e74 206e 756d  ta[16];..int num
00000990: 4279 7465 7352 6561 6420 3d20 6672 6561  BytesRead = frea
000009a0: 6428 6461 7461 2c20 312c 2031 362c 2069  d(data, 1, 16, i
000009b0: 6e70 7574 293b 0a09 756e 7369 676e 6564  nput);..unsigned
000009c0: 2069 6e74 206f 6666 7365 7420 3d20 303b   int offset = 0;
000009d0: 0a09 7768 696c 6520 286e 756d 4279 7465  ..while (numByte
000009e0: 7352 6561 6420 213d 2030 2920 7b0a 0909  sRead != 0) {...
000009f0: 7072 696e 7466 2822 2530 3878 3a22 2c20  printf("%08x:", 
00000a00: 6f66 6673 6574 293b 0a09 096f 6666 7365  offset);...offse
00000a10: 7420 2b3d 206e 756d 4279 7465 7352 6561  t += numBytesRea
00000a20: 643b 0a09 0970 7269 6e74 4461 7461 4173  d;...printDataAs
00000a30: 4865 7828 6461 7461 2c20 6e75 6d42 7974  Hex(data, numByt
00000a40: 6573 5265 6164 293b 0a09 0970 7269 6e74  esRead);...print
00000a50: 6628 2220 2022 293b 0a09 0970 7269 6e74  f("  ");...print
00000a60: 4461 7461 4173 4368 6172 7328 6461 7461  DataAsChars(data
00000a70: 2c20 6e75 6d42 7974 6573 5265 6164 293b  , numBytesRead);
00000a80: 0a09 0970 7269 6e74 6628 225c 6e22 293b  ...printf("\n");
00000a90: 0a09 096e 756d 4279 7465 7352 6561 6420  ...numBytesRead 
00000aa0: 3d20 6672 6561 6428 6461 7461 2c20 312c  = fread(data, 1,
00000ab0: 2031 362c 2069 6e70 7574 293b 0a09 7d0a   16, input);..}.
00000ac0: 7d0a 0a76 6f69 6420 7072 696e 7443 6861  }..void printCha
00000ad0: 7241 7342 6974 7328 756e 7369 676e 6564  rAsBits(unsigned
00000ae0: 2063 6861 7220 6461 7461 297b 0a09 6368   char data){..ch
00000af0: 6172 2062 696e 6172 795b 385d 3b0a 0969  ar binary[8];..i
00000b00: 6e74 2074 7261 636b 6572 203d 2037 3b0a  nt tracker = 7;.
00000b10: 0966 6f72 2028 696e 7420 6920 3d20 303b  .for (int i = 0;
00000b20: 2069 203c 2038 3b20 692b 2b29 7b0a 0909   i < 8; i++){...
00000b30: 6966 2028 6461 7461 2025 2032 203d 3d20  if (data % 2 == 
00000b40: 3129 207b 0a09 0909 6269 6e61 7279 5b74  1) {....binary[t
00000b50: 7261 636b 6572 5d20 3d20 313b 0a09 097d  racker] = 1;...}
00000b60: 2065 6c73 6520 6966 2028 6461 7461 2025   else if (data %
00000b70: 2032 203d 3d20 3029 7b0a 0909 0962 696e   2 == 0){....bin
00000b80: 6172 795b 7472 6163 6b65 725d 203d 2030  ary[tracker] = 0
00000b90: 3b0a 0909 7d20 656c 7365 207b 0a09 0909  ;...} else {....
00000ba0: 7072 696e 7466 2822 5c6e 2065 7863 7573  printf("\n excus
00000bb0: 6520 6d65 2077 6861 7420 5c6e 2229 3b0a  e me what \n");.
00000bc0: 0909 0965 7869 7428 3029 3b0a 0909 7d0a  ...exit(0);...}.
00000bd0: 0909 6461 7461 203d 2064 6174 612f 323b  ..data = data/2;
00000be0: 0a09 0974 7261 636b 6572 2d2d 3b0a 097d  ...tracker--;..}
00000bf0: 0a09 666f 7220 2869 6e74 2069 203d 2030  ..for (int i = 0
00000c00: 3b20 6920 3c20 383b 2069 2b2b 2920 7b0a  ; i < 8; i++) {.
00000c10: 0909 7072 696e 7466 2822 2564 222c 2062  ..printf("%d", b
00000c20: 696e 6172 795b 695d 293b 0a09 7d0a 0972  inary[i]);..}..r
00000c30: 6574 7572 6e3b 0a7d 0a0a 766f 6964 2070  eturn;.}..void p
00000c40: 7269 6e74 4461 7461 4173 4269 7473 2875  rintDataAsBits(u
00000c50: 6e73 6967 6e65 6420 6368 6172 2a20 6461  nsigned char* da
00000c60: 7461 2c20 7369 7a65 5f74 2073 697a 6529  ta, size_t size)
00000c70: 207b 0a09 696e 7420 636f 756e 7465 7220   {..int counter 
00000c80: 3d20 303b 0a09 696e 7420 626c 6f63 6b73  = 0;..int blocks
00000c90: 203d 2030 3b0a 0966 6f72 2028 636f 756e   = 0;..for (coun
00000ca0: 7465 723b 2063 6f75 6e74 6572 203c 2073  ter; counter < s
00000cb0: 697a 653b 2063 6f75 6e74 6572 2b2b 2920  ize; counter++) 
00000cc0: 7b0a 0909 7072 696e 7466 2822 2022 293b  {...printf(" ");
00000cd0: 0a09 0970 7269 6e74 4368 6172 4173 4269  ...printCharAsBi
00000ce0: 7473 2864 6174 615b 636f 756e 7465 725d  ts(data[counter]
00000cf0: 293b 0a09 0962 6c6f 636b 732b 2b3b 0a09  );...blocks++;..
00000d00: 7d0a 0969 6620 2873 697a 6520 3c20 3629  }..if (size < 6)
00000d10: 207b 0a09 0969 6e74 2072 656d 6169 6e64   {...int remaind
00000d20: 6572 203d 2036 2d73 697a 653b 0a09 0966  er = 6-size;...f
00000d30: 6f72 2028 696e 7420 6920 3d20 303b 2069  or (int i = 0; i
00000d40: 203c 2072 656d 6169 6e64 6572 3b20 692b   < remainder; i+
00000d50: 2b29 7b0a 0909 0970 7269 6e74 6628 2220  +){....printf(" 
00000d60: 2020 2020 2020 2022 293b 0a09 097d 0a09         ");...}..
00000d70: 0966 6f72 2028 626c 6f63 6b73 3b20 626c  .for (blocks; bl
00000d80: 6f63 6b73 203c 2036 3b20 626c 6f63 6b73  ocks < 6; blocks
00000d90: 2b2b 297b 0a09 0909 7072 696e 7466 2822  ++){....printf("
00000da0: 2022 293b 0a09 097d 0a09 7d0a 0972 6574   ");...}..}..ret
00000db0: 7572 6e3b 0a7d 0a0a 2f2a 2a0a 202a 2042  urn;.}../**. * B
00000dc0: 6974 7320 6f75 7470 7574 2066 6f72 2078  its output for x
00000dd0: 7864 2e0a 202a 0a20 2a20 5365 6520 6d79  xd.. *. * See my
00000de0: 7878 642e 6d64 2066 6f72 2064 6574 6169  xxd.md for detai
00000df0: 6c73 2e0a 202a 0a20 2a20 696e 7075 743a  ls.. *. * input:
00000e00: 2069 6e70 7574 2073 7472 6561 6d0a 202a   input stream. *
00000e10: 2a2f 0a76 6f69 6420 7265 6164 416e 6450  */.void readAndP
00000e20: 7269 6e74 496e 7075 7441 7342 6974 7328  rintInputAsBits(
00000e30: 4649 4c45 202a 696e 7075 7429 207b 0a20  FILE *input) {. 
00000e40: 092f 2f70 7269 6e74 6628 2254 4f44 4f20  .//printf("TODO 
00000e50: 333a 2072 6561 6441 6e64 5072 696e 7449  3: readAndPrintI
00000e60: 6e70 7574 4173 4269 7473 5c6e 2229 3b0a  nputAsBits\n");.
00000e70: 0975 6e73 6967 6e65 6420 6368 6172 2064  .unsigned char d
00000e80: 6174 615b 385d 3b0a 0969 6e74 206e 756d  ata[8];..int num
00000e90: 4279 7465 7352 6561 6420 3d20 6672 6561  BytesRead = frea
00000ea0: 6428 6461 7461 2c20 312c 2036 2c20 696e  d(data, 1, 6, in
00000eb0: 7075 7429 3b0a 0975 6e73 6967 6e65 6420  put);..unsigned 
00000ec0: 696e 7420 6f66 6673 6574 203d 2030 3b0a  int offset = 0;.
00000ed0: 0977 6869 6c65 2028 6e75 6d42 7974 6573  .while (numBytes
00000ee0: 5265 6164 2021 3d20 3029 207b 0a09 0970  Read != 0) {...p
00000ef0: 7269 6e74 6628 2225 3038 783a 222c 206f  rintf("%08x:", o
00000f00: 6666 7365 7429 3b0a 0909 6f66 6673 6574  ffset);...offset
00000f10: 202b 3d20 6e75 6d42 7974 6573 5265 6164   += numBytesRead
00000f20: 3b0a 0909 7072 696e 7444 6174 6141 7342  ;...printDataAsB
00000f30: 6974 7328 6461 7461 2c20 6e75 6d42 7974  its(data, numByt
00000f40: 6573 5265 6164 293b 0a09 0970 7269 6e74  esRead);...print
00000f50: 6628 2220 2022 293b 0a09 0970 7269 6e74  f("  ");...print
00000f60: 4461 7461 4173 4368 6172 7328 6461 7461  DataAsChars(data
00000f70: 2c20 6e75 6d42 7974 6573 5265 6164 293b  , numBytesRead);
00000f80: 0a09 0970 7269 6e74 6628 225c 6e22 293b  ...printf("\n");
00000f90: 0a09 096e 756d 4279 7465 7352 6561 6420  ...numBytesRead 
00000fa0: 3d20 6672 6561 6428 6461 7461 2c20 312c  = fread(data, 1,
00000fb0: 2036 2c20 696e 7075 7429 3b0a 097d 0a7d   6, input);..}.}
00000fc0: 0a0a 696e 7420 6d61 696e 2869 6e74 2061  ..int main(int a
00000fd0: 7267 632c 2063 6861 7220 2a2a 6172 6776  rgc, char **argv
00000fe0: 2920 7b0a 0969 6e74 2062 6974 7320 3d20  ) {..int bits = 
00000ff0: 4641 4c53 453b 0a09 4649 4c45 202a 696e  FALSE;..FILE *in
00001000: 7075 7420 3d20 7061 7273 6543 6f6d 6d61  put = parseComma
00001010: 6e64 4c69 6e65 2861 7267 632c 2061 7267  ndLine(argc, arg
00001020: 762c 2026 6269 7473 293b 0a0a 0969 6620  v, &bits);...if 
00001030: 2862 6974 7320 3d3d 2046 414c 5345 2920  (bits == FALSE) 
00001040: 7b0a 0909 7265 6164 416e 6450 7269 6e74  {...readAndPrint
00001050: 496e 7075 7441 7348 6578 2869 6e70 7574  InputAsHex(input
00001060: 293b 0a09 7d20 656c 7365 207b 0a09 0972  );..} else {...r
00001070: 6561 6441 6e64 5072 696e 7449 6e70 7574  eadAndPrintInput
00001080: 4173 4269 7473 2869 6e70 7574 293b 0a09  AsBits(input);..
00001090: 7d0a 0972 6574 7572 6e20 303b 0a7d 0a    }..return 0;.}.
